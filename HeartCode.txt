// Heart
#include "mbed.h"
#include "rtos.h"
#include "TextLCD.h"
Serial pc(USBTX, USBRX);
Timer global;
DigitalOut asignal(p5);
DigitalOut vsignal(p6);
DigitalIn apace(p7);
DigitalIn vpace(p8);
DigitalIn ready(p21);
DigitalOut sendAck(p22);
DigitalOut asignalLED(LED1);
DigitalOut vsignalLED(LED2);
DigitalOut apaceLED(LED3);
DigitalOut vpaceLED(LED4);
DigitalOut connected1(p23);
DigitalOut connected2(p24);

#define visibility 1

TextLCD lcd( p15,p16, p17, p18, p19, p20, TextLCD::LCD16x2); // rs, e, d4, d5, d6, d7
int avimin=30*visibility;
int avimax=100*visibility;

int pvarpmin=150*visibility;
int pvarpmax=500*visibility;
int pvrpmax= (pvarpmax-100)*visibility; 
// aminwait has to be less than avimin because heart can be dysfunctional
int aminwait=15*visibility;

// vminwait has to be less than pvarpmin because heart can be dysfunctional
int vminwait=75*visibility;

int uri[4]={1000*1,600*1,343*1,343*1};
int lri[4]={2000*1,1500*1,600*1,2000*1};
//Mutex m;

bool manualMode=false;
bool testMode=false;

Timer t;
int count=0;
bool obs_heart=false;
bool buzz=false;
bool modeEntered=false;
DigitalOut buzzer(p25);





void sendAsignal(void const *n)
{ 
  int random;
while(1)
{
    if(manualMode==false && testMode==false){
    
    asignal=1;
    asignalLED=1;
    wait(0.001);
    asignal=0;
    asignalLED=0;    
    count++;
    random=aminwait + rand()%500 ;
    Thread::wait(random);}
    
}   
}

void sendVsignal(void const *n)
{
    int random;
    while(1)
{
    if(manualMode==false && testMode==false){

    vsignal=1;
    vsignalLED=1;
    wait(0.001);
    vsignal=0;
    vsignalLED=0;

    random= vminwait + rand()%500 ;
    Thread::wait(random);
    }

}
}


void aPace(const void *n)
{
    //vpaceLED=1;
    //apaceLED=1;
while(1){
        
        if(buzz)
        {
            connected1=0;
            
        }
        else if(modeEntered==1)
        {
            connected1=1;
        }
        else if(apace==1)
        {
        apaceLED=1;
        vpaceLED=0;
        //printf("Apace Received!\n");
            connected1=1;
            }
        else{
        connected1=0;
        }
        
        
    
}

}

void vPace(const void *n)
{
 while(1){   
        if(buzz)
        {
            connected2=0;
        }
        else if(modeEntered==1)
        {
            
            connected2=1;
            
        }
        else if(vpace==1){
        vpaceLED=1;
        apaceLED=0;
        //printf("Vpace Received!\n");
        if(testMode==true&& modeEntered==true)
        {
            connected2=1;
        }
        else{
        connected2=1;
        }
        }
        else{
            connected2=0;
            }
    }
}


void manualMode_()
{
 char x='x';
 printf("Press a for asignal and v for v signal. Press e to exit.\n");
 while(true){
     if(pc.readable())
     {
         x=pc.getc();
         switch(x){
             case 'a': 
                    asignal=1;
                    asignalLED=1;
                    wait(0.001);
                    asignal=0;
                    asignalLED=0;
                    printf("Asignal Sent -- Manual\n");
                    break;
            case 'A': asignal=1;
                    asignalLED=1;
                    wait(0.001);
                    asignal=0;
                    asignalLED=0;
                    printf("Asignal Sent -- Manual\n");
                    break;
            case 'v': vsignal=1;
                    vsignalLED=1;
                    wait(0.001);
                    vsignal=0;
                    vsignalLED=0;
                    printf("Vsignal Sent -- Manual\n");
                    break;
            case 'V': vsignal=1;
                    vsignalLED=1;
                    wait(0.001);
                    vsignal=0;
                    vsignalLED=0;
                    printf("Vsignal Sent -- Manual\n");
                    break;
            case 'e':printf("Exiting manual\n");
            break; 
                    
            case 'E':printf("Exiting manual\n");
            break;
            default: printf("Invalid input\n");
            break; 
             
             }
             
             if(x=='e' || x=='E')
             {return;}
         
         }
     
     }
}

int min(int a,int b)
{
    return a>b?b:a;
}


  void testMode_(void const *n)
{
    
    
    t.start();
    sendAck=0;
    while(1){
    
    if(testMode==true){
        
        
        Timer temp_v;
        temp_v.start();
        sendAck=1;
        Thread::wait(10);
        sendAck=0;
        Thread::wait(2000); //  Waiting time for resetting the pacemaker
        
        asignal=0;
        asignalLED=0;
        vsignal=0;
        vsignalLED=0;    
        int iter=1;
        
        printf("Test Case 1 - Perfect Heart\n");
        //global.start();
        //printf("Global Time: %d\n",global.read_ms());
        lcd.locate(0,1);
        lcd.printf("Mode: Test - PH");
        
        while(ready!=1);
        modeEntered=true;
        while(iter<=20){
        t.reset(); 
        asignal=1;
        while(t.read_ms()<=pvarpmin+50);
        vsignal=1;
        while(t.read_ms()<=avimin-10);
        
       // printf("Valid ASig : After Pvarp Global: %d Iteration Time: %d\n", global.read_ms(), t.read_ms() );
        
        
        
       //asignal=0;
        
       // printf("Valid VSig : After Avimin Global: %d Iteration Time: %d\n", global.read_ms(), t.read_ms() );
        //temp_v.reset();
        iter++;
    }
        modeEntered=false;
        vsignal=0;
        asignal=0;
        iter=1;    
        lcd.locate(0,1);
        lcd.printf("Mode: Test-DysH");
        printf("Test Case 2 - Dysfunctional Heart\n");
    while(iter<=100){
        t.reset();
       // printf("Doing nothing. Dysfunctional\n");
        Thread::wait(10);

        iter++;
    }
    
        vsignal=0;
        asignal=0;
        iter=1;    
        lcd.cls();
        lcd.locate(0,0);
        lcd.printf("Heart");
        lcd.locate(0,1);
        lcd.printf("Mode:ASig,VP");
    printf("Test Case 3 - Valid ASignal and Vpace received Heart\n");
    while(iter<=10){
        t.reset();
        
        vsignal=0;
        asignal=1;
        while(t.read_ms()<pvarpmin);
        //printf("Valid ASig : After Pvarp Global: %d Iteration Time: %d\n", global.read_ms(), t.read_ms() );
        t.reset();
        asignal=0;
        while(vpace!=1);
            //asignal=0;
          //  printf("Vpace Received : After URI and AVI max Global: %d Iteration Time: %d\n", global.read_ms(), t.read_ms() );
        iter++;
    }
    
    
        vsignal=0;
        asignal=0;
        iter=1;    
        lcd.cls();
        lcd.locate(0,0);
        lcd.printf("Heart");
        lcd.locate(0,1);
        lcd.printf("Mode:VSig,AP");
        printf("Test case 4- Valid V signal is sent and Apace is received\n");
    while(iter<=10){
        t.reset();
        vsignal=0;
        while(apace!=1);
        //printf(" APace received : After LRI Global: %d Iteration Time: %d\n", global.read_ms(), t.read_ms() );
        t.reset();
        vsignal=1;
        while(t.read_ms()<20);
        //vsignal=0;
        //vsignal=1;
        //printf("Valid VSig : After Avimax and URI Global: %d Iteration Time: %d\n", global.read_ms(), t.read_ms() );
        iter++;
        //printf("%d\n" ,iter);
    }
    
    
        vsignal=0;
        asignal=0;
        iter=1;    
        lcd.cls();
        lcd.locate(0,0);
        lcd.printf("Heart");
        lcd.locate(0,1);
        lcd.printf("ModeT: Buzzy");
        printf("Test case 5- Buzzer is buzzing when the heart is not detecing paces\n");
        buzz=true;
    while(iter<=2){
        //asignal=0;
        t.reset();
        while(t.read()<5);
        //vsignal=0;
        iter++;
        //printf("%d\n" ,iter);
    }
    buzz=false;
    
    testMode=false;
    printf("Exited test mode.\n");
    lcd.locate(0,1);
    lcd.printf("Normal mode\n");
}
}
}

        
    

void obsh()
{
    int interval=10;
    
    printf("The default waiting interval is 10s. Do you want to modify it? y or n?\n");
    while(1)
    {
        if(pc.readable())
        {
            char x=pc.getc();
            if(x=='y')
            {
                printf("Enter the observation interval.\n");
                while(1)
                {
                    if(pc.readable())
                {
                   pc.scanf("%d",&interval);
                   pc.getc();
                   printf("Interval: %d\n",interval);
                   break; 
                    
                }
                }
                
            }
            else
            {
                printf("Default rate set to 10.\n");
            }
         break;   
        }
            
    }
    count=0;
    Timer t_;
    t_.start();
    while(t_.read()<=interval);
    
    count=count*((int)(60/interval));
    printf("Heart Rate %d\n", count );
    lcd.cls();
    lcd.locate(0,0);
    lcd.printf("HR: %d\n",count);
    lcd.locate(0,1);
    lcd.printf("Mode: Obs\n");

}


int main() {
   
   Thread asense(&sendAsignal);
   Thread vsense(&sendVsignal);
   Thread ap(&aPace);
   Thread vp(&vPace);
   Thread test(&testMode_);
   asignal=0;
   vsignal=0;
   connected1=0;
   connected2=0;
   lcd.printf("Heart");
   printf("Kindly enter m for Manual, t for test mode and r for normal mode, o for observation rate.\n");
   char x;
    while (1) {
            
            if(pc.readable())
            {
                x= pc.getc();
                switch(x){
                    case 'm': printf("Entered manual mode. Press a and v to generate a and v signals respectively\n");
                            manualMode=true;
                            manualMode_();
                            manualMode=false;
                            lcd.locate(0,1);
                            lcd.printf("Mode: Manual");
                            break;
                    case 'M': printf("Entered manual mode. Press a and v to generate a and v signals respectively\n");
                            manualMode=true;
                            manualMode_();
                            manualMode=false;
                            //x='r';
                            lcd.locate(0,1);
                            lcd.printf("Mode: Manual");
                            break;
                    case 't': printf("Entered test mode.\n");
                            testMode=true;
                         
                            lcd.locate(0,1);
                            lcd.printf("Mode: Test");
                            break;
                    case 'T': printf("Entered test mode.\n");
                            testMode=true;
                           
                            lcd.locate(0,1);
                            lcd.printf("Mode: Test");
                            break;
                    case 'r': printf("Entered random mode.\n");
                            testMode=false;
                            manualMode=false;
                            lcd.locate(0,1);
                            lcd.printf("Mode: Random");
                            break;
                    case 'R': printf("Entered random mode.\n");
                            testMode=false;
                            manualMode=false;
                            lcd.locate(0,1);
                            lcd.printf("Mode: Random");
                            break;
                    case 'o':printf("Entered observation mode.\n");                           
                            obs_heart=true;
                            lcd.locate(0,1);
                            obsh();
                            break;
                            //lcd.printf("Mode: Obs");
                    
                    case 'O': printf("Entered Observation mode.\n");
                            obs_heart=true;
                            obsh();
                            break;
                            //lcd.locate(0,1);
                            //lcd.printf("Observation");
                 default: printf("Enter valid char\n");
                    
            }
    }

}
}